// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class issued extends ethereum.Event {
  get params(): issued__Params {
    return new issued__Params(this);
  }
}

export class issued__Params {
  _event: issued;

  constructor(event: issued) {
    this._event = event;
  }

  get issueSize(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get offerPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minAskPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get minSubscription(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currency(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get security(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get offerType(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get isin(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }

  get status(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }

  get productCategory(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }
}

export class offered extends ethereum.Event {
  get params(): offered__Params {
    return new offered__Params(this);
  }
}

export class offered__Params {
  _event: offered;

  constructor(event: offered) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class opened extends ethereum.Event {
  get params(): opened__Params {
    return new opened__Params(this);
  }
}

export class opened__Params {
  _event: opened;

  constructor(event: opened) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class closed extends ethereum.Event {
  get params(): closed__Params {
    return new closed__Params(this);
  }
}

export class closed__Params {
  _event: closed;

  constructor(event: closed) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class allotted extends ethereum.Event {
  get params(): allotted__Params {
    return new allotted__Params(this);
  }
}

export class allotted__Params {
  _event: allotted;

  constructor(event: allotted) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Issues__getShareResultValue0Struct extends ethereum.Tuple {
  get issueSize(): BigInt {
    return this[0].toBigInt();
  }

  get faceValue(): BigInt {
    return this[1].toBigInt();
  }

  get offerPrice(): BigInt {
    return this[2].toBigInt();
  }

  get minAskPrice(): BigInt {
    return this[3].toBigInt();
  }

  get minSubscription(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Bytes {
    return this[5].toBytes();
  }

  get security(): Address {
    return this[6].toAddress();
  }
}

export class Issues__getShareResultValue1Struct extends ethereum.Tuple {
  get offerType(): Bytes {
    return this[0].toBytes();
  }

  get isin(): Bytes {
    return this[1].toBytes();
  }

  get status(): Bytes {
    return this[2].toBytes();
  }

  get offeringDocuments(): string {
    return this[3].toString();
  }
}

export class Issues__getShareResult {
  value0: Array<Issues__getShareResultValue0Struct>;
  value1: Issues__getShareResultValue1Struct;

  constructor(
    value0: Array<Issues__getShareResultValue0Struct>,
    value1: Issues__getShareResultValue1Struct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }
}

export class Issues__getBondResultValue0Struct extends ethereum.Tuple {
  get issueSize(): BigInt {
    return this[0].toBigInt();
  }

  get coupon(): BigInt {
    return this[1].toBigInt();
  }

  get offerPrice(): BigInt {
    return this[2].toBigInt();
  }

  get minAskPrice(): BigInt {
    return this[3].toBigInt();
  }

  get minSubscription(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Bytes {
    return this[5].toBytes();
  }

  get security(): Address {
    return this[6].toAddress();
  }
}

export class Issues__getBondResultValue1Struct extends ethereum.Tuple {
  get offerType(): Bytes {
    return this[0].toBytes();
  }

  get couponPaymentCycle(): BigInt {
    return this[1].toBigInt();
  }

  get tenure(): BigInt {
    return this[2].toBigInt();
  }

  get isin(): Bytes {
    return this[3].toBytes();
  }

  get status(): Bytes {
    return this[4].toBytes();
  }

  get offeringDocuments(): string {
    return this[5].toString();
  }
}

export class Issues__getBondResult {
  value0: Array<Issues__getBondResultValue0Struct>;
  value1: Issues__getBondResultValue1Struct;

  constructor(
    value0: Array<Issues__getBondResultValue0Struct>,
    value1: Issues__getBondResultValue1Struct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }
}

export class Issues__getLiquidityProvidersResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get amountOffered(): BigInt {
    return this[1].toBigInt();
  }

  get amountDesired(): BigInt {
    return this[2].toBigInt();
  }

  get min(): BigInt {
    return this[3].toBigInt();
  }
}

export class Issues__getSubscribersResultValue0Struct extends ethereum.Tuple {
  get currency(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get poolid(): Bytes {
    return this[3].toBytes();
  }

  get status(): boolean {
    return this[4].toBoolean();
  }

  get platform(): Address {
    return this[5].toAddress();
  }

  get investor(): Address {
    return this[6].toAddress();
  }

  get asset(): Address {
    return this[7].toAddress();
  }
}

export class Issues__getPaymentStatusForResultValue0Struct extends ethereum.Tuple {
  get currency(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get payoutDate(): BigInt {
    return this[2].toBigInt();
  }

  get payer(): Address {
    return this[3].toAddress();
  }
}

export class Issues__getDateOfIssueResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Issues__getmaturityDateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Issues__getfirstCouponDateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Issues__computeNextCouponDateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Issues extends ethereum.SmartContract {
  static bind(address: Address): Issues {
    return new Issues("Issues", address);
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getShare(): Issues__getShareResult {
    let result = super.call(
      "getShare",
      "getShare():((uint256,uint256,uint256,uint256,uint256,bytes32,address)[],(bytes32,bytes32,bytes32,string))",
      []
    );

    return new Issues__getShareResult(
      result[0].toTupleArray<Issues__getShareResultValue0Struct>(),
      changetype<Issues__getShareResultValue1Struct>(result[1].toTuple())
    );
  }

  try_getShare(): ethereum.CallResult<Issues__getShareResult> {
    let result = super.tryCall(
      "getShare",
      "getShare():((uint256,uint256,uint256,uint256,uint256,bytes32,address)[],(bytes32,bytes32,bytes32,string))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Issues__getShareResult(
        value[0].toTupleArray<Issues__getShareResultValue0Struct>(),
        changetype<Issues__getShareResultValue1Struct>(value[1].toTuple())
      )
    );
  }

  getBond(): Issues__getBondResult {
    let result = super.call(
      "getBond",
      "getBond():((uint256,uint256,uint256,uint256,uint256,bytes32,address)[],(bytes32,uint256,uint256,bytes32,bytes32,string))",
      []
    );

    return new Issues__getBondResult(
      result[0].toTupleArray<Issues__getBondResultValue0Struct>(),
      changetype<Issues__getBondResultValue1Struct>(result[1].toTuple())
    );
  }

  try_getBond(): ethereum.CallResult<Issues__getBondResult> {
    let result = super.tryCall(
      "getBond",
      "getBond():((uint256,uint256,uint256,uint256,uint256,bytes32,address)[],(bytes32,uint256,uint256,bytes32,bytes32,string))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Issues__getBondResult(
        value[0].toTupleArray<Issues__getBondResultValue0Struct>(),
        changetype<Issues__getBondResultValue1Struct>(value[1].toTuple())
      )
    );
  }

  getLiquidityProviders(
    platform: Address,
    isin: Bytes
  ): Array<Issues__getLiquidityProvidersResultValue0Struct> {
    let result = super.call(
      "getLiquidityProviders",
      "getLiquidityProviders(address,bytes32):((address,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(platform),
        ethereum.Value.fromFixedBytes(isin)
      ]
    );

    return result[0].toTupleArray<
      Issues__getLiquidityProvidersResultValue0Struct
    >();
  }

  try_getLiquidityProviders(
    platform: Address,
    isin: Bytes
  ): ethereum.CallResult<
    Array<Issues__getLiquidityProvidersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getLiquidityProviders",
      "getLiquidityProviders(address,bytes32):((address,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(platform),
        ethereum.Value.fromFixedBytes(isin)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Issues__getLiquidityProvidersResultValue0Struct>()
    );
  }

  getSubscribers(): Array<Issues__getSubscribersResultValue0Struct> {
    let result = super.call(
      "getSubscribers",
      "getSubscribers():((bytes32,uint256,uint256,bytes32,bool,address,address,address)[])",
      []
    );

    return result[0].toTupleArray<Issues__getSubscribersResultValue0Struct>();
  }

  try_getSubscribers(): ethereum.CallResult<
    Array<Issues__getSubscribersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getSubscribers",
      "getSubscribers():((bytes32,uint256,uint256,bytes32,bool,address,address,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Issues__getSubscribersResultValue0Struct>()
    );
  }

  getBeneficiaries(): Array<Address> {
    let result = super.call(
      "getBeneficiaries",
      "getBeneficiaries():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getBeneficiaries(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBeneficiaries",
      "getBeneficiaries():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  computeNextInstallment(_currency: Address): BigInt {
    let result = super.call(
      "computeNextInstallment",
      "computeNextInstallment(address):(uint256)",
      [ethereum.Value.fromAddress(_currency)]
    );

    return result[0].toBigInt();
  }

  try_computeNextInstallment(_currency: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeNextInstallment",
      "computeNextInstallment(address):(uint256)",
      [ethereum.Value.fromAddress(_currency)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPaymentAmountFor(_beneficiary: Address): BigInt {
    let result = super.call(
      "getPaymentAmountFor",
      "getPaymentAmountFor(address):(uint256)",
      [ethereum.Value.fromAddress(_beneficiary)]
    );

    return result[0].toBigInt();
  }

  try_getPaymentAmountFor(_beneficiary: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPaymentAmountFor",
      "getPaymentAmountFor(address):(uint256)",
      [ethereum.Value.fromAddress(_beneficiary)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPaymentStatusFor(
    _beneficiary: Address
  ): Array<Issues__getPaymentStatusForResultValue0Struct> {
    let result = super.call(
      "getPaymentStatusFor",
      "getPaymentStatusFor(address):((bytes32,uint256,uint256,address)[])",
      [ethereum.Value.fromAddress(_beneficiary)]
    );

    return result[0].toTupleArray<
      Issues__getPaymentStatusForResultValue0Struct
    >();
  }

  try_getPaymentStatusFor(
    _beneficiary: Address
  ): ethereum.CallResult<Array<Issues__getPaymentStatusForResultValue0Struct>> {
    let result = super.tryCall(
      "getPaymentStatusFor",
      "getPaymentStatusFor(address):((bytes32,uint256,uint256,address)[])",
      [ethereum.Value.fromAddress(_beneficiary)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Issues__getPaymentStatusForResultValue0Struct>()
    );
  }

  isAllPaidFor(_byTime: BigInt): Array<Address> {
    let result = super.call(
      "isAllPaidFor",
      "isAllPaidFor(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_byTime)]
    );

    return result[0].toAddressArray();
  }

  try_isAllPaidFor(_byTime: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "isAllPaidFor",
      "isAllPaidFor(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_byTime)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDateOfIssue(): Issues__getDateOfIssueResult {
    let result = super.call(
      "getDateOfIssue",
      "getDateOfIssue():(uint256,uint256,uint256)",
      []
    );

    return new Issues__getDateOfIssueResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getDateOfIssue(): ethereum.CallResult<Issues__getDateOfIssueResult> {
    let result = super.tryCall(
      "getDateOfIssue",
      "getDateOfIssue():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Issues__getDateOfIssueResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getmaturityDate(): Issues__getmaturityDateResult {
    let result = super.call(
      "getmaturityDate",
      "getmaturityDate():(uint256,uint256,uint256)",
      []
    );

    return new Issues__getmaturityDateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getmaturityDate(): ethereum.CallResult<Issues__getmaturityDateResult> {
    let result = super.tryCall(
      "getmaturityDate",
      "getmaturityDate():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Issues__getmaturityDateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getfirstCouponDate(): Issues__getfirstCouponDateResult {
    let result = super.call(
      "getfirstCouponDate",
      "getfirstCouponDate():(uint256,uint256,uint256)",
      []
    );

    return new Issues__getfirstCouponDateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getfirstCouponDate(): ethereum.CallResult<
    Issues__getfirstCouponDateResult
  > {
    let result = super.tryCall(
      "getfirstCouponDate",
      "getfirstCouponDate():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Issues__getfirstCouponDateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  computeNextCouponDate(): Issues__computeNextCouponDateResult {
    let result = super.call(
      "computeNextCouponDate",
      "computeNextCouponDate():(uint256,uint256,uint256)",
      []
    );

    return new Issues__computeNextCouponDateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_computeNextCouponDate(): ethereum.CallResult<
    Issues__computeNextCouponDateResult
  > {
    let result = super.tryCall(
      "computeNextCouponDate",
      "computeNextCouponDate():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Issues__computeNextCouponDateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getcouponFrequencyInMonths(): BigInt {
    let result = super.call(
      "getcouponFrequencyInMonths",
      "getcouponFrequencyInMonths():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getcouponFrequencyInMonths(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getcouponFrequencyInMonths",
      "getcouponFrequencyInMonths():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getinterestRateInBips(_currency: Address): BigInt {
    let result = super.call(
      "getinterestRateInBips",
      "getinterestRateInBips(address):(uint256)",
      [ethereum.Value.fromAddress(_currency)]
    );

    return result[0].toBigInt();
  }

  try_getinterestRateInBips(_currency: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getinterestRateInBips",
      "getinterestRateInBips(address):(uint256)",
      [ethereum.Value.fromAddress(_currency)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _productReference(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _productCategory(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _issuer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _registrar(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _securityContract(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _securityRegistriesContract(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _viaFactoryContract(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class IssueShareCall extends ethereum.Call {
  get inputs(): IssueShareCall__Inputs {
    return new IssueShareCall__Inputs(this);
  }

  get outputs(): IssueShareCall__Outputs {
    return new IssueShareCall__Outputs(this);
  }
}

export class IssueShareCall__Inputs {
  _call: IssueShareCall;

  constructor(call: IssueShareCall) {
    this._call = call;
  }

  get _issueSize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _offerPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minAskPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minSubscription(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _currency(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _offerType(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _isin(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _offeringDocuments(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class IssueShareCall__Outputs {
  _call: IssueShareCall;

  constructor(call: IssueShareCall) {
    this._call = call;
  }
}

export class IssueBondCall extends ethereum.Call {
  get inputs(): IssueBondCall__Inputs {
    return new IssueBondCall__Inputs(this);
  }

  get outputs(): IssueBondCall__Outputs {
    return new IssueBondCall__Outputs(this);
  }
}

export class IssueBondCall__Inputs {
  _call: IssueBondCall;

  constructor(call: IssueBondCall) {
    this._call = call;
  }

  get _issueSize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _offerPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minAskPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minSubscription(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _couponPaymentCycle(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _tenure(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _currency(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _offerType(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get _isin(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get _offeringDocuments(): string {
    return this._call.inputValues[9].value.toString();
  }
}

export class IssueBondCall__Outputs {
  _call: IssueBondCall;

  constructor(call: IssueBondCall) {
    this._call = call;
  }
}

export class RegisterPlatformCall extends ethereum.Call {
  get inputs(): RegisterPlatformCall__Inputs {
    return new RegisterPlatformCall__Inputs(this);
  }

  get outputs(): RegisterPlatformCall__Outputs {
    return new RegisterPlatformCall__Outputs(this);
  }
}

export class RegisterPlatformCall__Inputs {
  _call: RegisterPlatformCall;

  constructor(call: RegisterPlatformCall) {
    this._call = call;
  }

  get _liquidityPlatform(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterPlatformCall__Outputs {
  _call: RegisterPlatformCall;

  constructor(call: RegisterPlatformCall) {
    this._call = call;
  }
}

export class AskOffersCall extends ethereum.Call {
  get inputs(): AskOffersCall__Inputs {
    return new AskOffersCall__Inputs(this);
  }

  get outputs(): AskOffersCall__Outputs {
    return new AskOffersCall__Outputs(this);
  }
}

export class AskOffersCall__Inputs {
  _call: AskOffersCall;

  constructor(call: AskOffersCall) {
    this._call = call;
  }
}

export class AskOffersCall__Outputs {
  _call: AskOffersCall;

  constructor(call: AskOffersCall) {
    this._call = call;
  }
}

export class StartIssueCall extends ethereum.Call {
  get inputs(): StartIssueCall__Inputs {
    return new StartIssueCall__Inputs(this);
  }

  get outputs(): StartIssueCall__Outputs {
    return new StartIssueCall__Outputs(this);
  }
}

export class StartIssueCall__Inputs {
  _call: StartIssueCall;

  constructor(call: StartIssueCall) {
    this._call = call;
  }

  get cutOffTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartIssueCall__Outputs {
  _call: StartIssueCall;

  constructor(call: StartIssueCall) {
    this._call = call;
  }
}

export class GetLiquidityProvidersCall extends ethereum.Call {
  get inputs(): GetLiquidityProvidersCall__Inputs {
    return new GetLiquidityProvidersCall__Inputs(this);
  }

  get outputs(): GetLiquidityProvidersCall__Outputs {
    return new GetLiquidityProvidersCall__Outputs(this);
  }
}

export class GetLiquidityProvidersCall__Inputs {
  _call: GetLiquidityProvidersCall;

  constructor(call: GetLiquidityProvidersCall) {
    this._call = call;
  }

  get platform(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isin(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class GetLiquidityProvidersCall__Outputs {
  _call: GetLiquidityProvidersCall;

  constructor(call: GetLiquidityProvidersCall) {
    this._call = call;
  }

  get value0(): Array<GetLiquidityProvidersCallValue0Struct> {
    return this._call.outputValues[0].value.toTupleArray<
      GetLiquidityProvidersCallValue0Struct
    >();
  }
}

export class GetLiquidityProvidersCallValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get amountOffered(): BigInt {
    return this[1].toBigInt();
  }

  get amountDesired(): BigInt {
    return this[2].toBigInt();
  }

  get min(): BigInt {
    return this[3].toBigInt();
  }
}

export class GetSubscribersCall extends ethereum.Call {
  get inputs(): GetSubscribersCall__Inputs {
    return new GetSubscribersCall__Inputs(this);
  }

  get outputs(): GetSubscribersCall__Outputs {
    return new GetSubscribersCall__Outputs(this);
  }
}

export class GetSubscribersCall__Inputs {
  _call: GetSubscribersCall;

  constructor(call: GetSubscribersCall) {
    this._call = call;
  }
}

export class GetSubscribersCall__Outputs {
  _call: GetSubscribersCall;

  constructor(call: GetSubscribersCall) {
    this._call = call;
  }

  get value0(): Array<GetSubscribersCallValue0Struct> {
    return this._call.outputValues[0].value.toTupleArray<
      GetSubscribersCallValue0Struct
    >();
  }
}

export class GetSubscribersCallValue0Struct extends ethereum.Tuple {
  get currency(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get poolid(): Bytes {
    return this[3].toBytes();
  }

  get status(): boolean {
    return this[4].toBoolean();
  }

  get platform(): Address {
    return this[5].toAddress();
  }

  get investor(): Address {
    return this[6].toAddress();
  }

  get asset(): Address {
    return this[7].toAddress();
  }
}

export class AllotIssueCall extends ethereum.Call {
  get inputs(): AllotIssueCall__Inputs {
    return new AllotIssueCall__Inputs(this);
  }

  get outputs(): AllotIssueCall__Outputs {
    return new AllotIssueCall__Outputs(this);
  }
}

export class AllotIssueCall__Inputs {
  _call: AllotIssueCall;

  constructor(call: AllotIssueCall) {
    this._call = call;
  }

  get _allotment(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _platform(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pool(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _investor(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _asset(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class AllotIssueCall__Outputs {
  _call: AllotIssueCall;

  constructor(call: AllotIssueCall) {
    this._call = call;
  }
}

export class ComputeNextInstallmentCall extends ethereum.Call {
  get inputs(): ComputeNextInstallmentCall__Inputs {
    return new ComputeNextInstallmentCall__Inputs(this);
  }

  get outputs(): ComputeNextInstallmentCall__Outputs {
    return new ComputeNextInstallmentCall__Outputs(this);
  }
}

export class ComputeNextInstallmentCall__Inputs {
  _call: ComputeNextInstallmentCall;

  constructor(call: ComputeNextInstallmentCall) {
    this._call = call;
  }

  get _currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ComputeNextInstallmentCall__Outputs {
  _call: ComputeNextInstallmentCall;

  constructor(call: ComputeNextInstallmentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetPaymentAmountForCall extends ethereum.Call {
  get inputs(): GetPaymentAmountForCall__Inputs {
    return new GetPaymentAmountForCall__Inputs(this);
  }

  get outputs(): GetPaymentAmountForCall__Outputs {
    return new GetPaymentAmountForCall__Outputs(this);
  }
}

export class GetPaymentAmountForCall__Inputs {
  _call: GetPaymentAmountForCall;

  constructor(call: GetPaymentAmountForCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetPaymentAmountForCall__Outputs {
  _call: GetPaymentAmountForCall;

  constructor(call: GetPaymentAmountForCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetPaymentStatusForCall extends ethereum.Call {
  get inputs(): GetPaymentStatusForCall__Inputs {
    return new GetPaymentStatusForCall__Inputs(this);
  }

  get outputs(): GetPaymentStatusForCall__Outputs {
    return new GetPaymentStatusForCall__Outputs(this);
  }
}

export class GetPaymentStatusForCall__Inputs {
  _call: GetPaymentStatusForCall;

  constructor(call: GetPaymentStatusForCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetPaymentStatusForCall__Outputs {
  _call: GetPaymentStatusForCall;

  constructor(call: GetPaymentStatusForCall) {
    this._call = call;
  }

  get value0(): Array<GetPaymentStatusForCallValue0Struct> {
    return this._call.outputValues[0].value.toTupleArray<
      GetPaymentStatusForCallValue0Struct
    >();
  }
}

export class GetPaymentStatusForCallValue0Struct extends ethereum.Tuple {
  get currency(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get payoutDate(): BigInt {
    return this[2].toBigInt();
  }

  get payer(): Address {
    return this[3].toAddress();
  }
}

export class IsAllPaidForCall extends ethereum.Call {
  get inputs(): IsAllPaidForCall__Inputs {
    return new IsAllPaidForCall__Inputs(this);
  }

  get outputs(): IsAllPaidForCall__Outputs {
    return new IsAllPaidForCall__Outputs(this);
  }
}

export class IsAllPaidForCall__Inputs {
  _call: IsAllPaidForCall;

  constructor(call: IsAllPaidForCall) {
    this._call = call;
  }

  get _byTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IsAllPaidForCall__Outputs {
  _call: IsAllPaidForCall;

  constructor(call: IsAllPaidForCall) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }
}

export class GetDateOfIssueCall extends ethereum.Call {
  get inputs(): GetDateOfIssueCall__Inputs {
    return new GetDateOfIssueCall__Inputs(this);
  }

  get outputs(): GetDateOfIssueCall__Outputs {
    return new GetDateOfIssueCall__Outputs(this);
  }
}

export class GetDateOfIssueCall__Inputs {
  _call: GetDateOfIssueCall;

  constructor(call: GetDateOfIssueCall) {
    this._call = call;
  }
}

export class GetDateOfIssueCall__Outputs {
  _call: GetDateOfIssueCall;

  constructor(call: GetDateOfIssueCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class GetmaturityDateCall extends ethereum.Call {
  get inputs(): GetmaturityDateCall__Inputs {
    return new GetmaturityDateCall__Inputs(this);
  }

  get outputs(): GetmaturityDateCall__Outputs {
    return new GetmaturityDateCall__Outputs(this);
  }
}

export class GetmaturityDateCall__Inputs {
  _call: GetmaturityDateCall;

  constructor(call: GetmaturityDateCall) {
    this._call = call;
  }
}

export class GetmaturityDateCall__Outputs {
  _call: GetmaturityDateCall;

  constructor(call: GetmaturityDateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class GetfirstCouponDateCall extends ethereum.Call {
  get inputs(): GetfirstCouponDateCall__Inputs {
    return new GetfirstCouponDateCall__Inputs(this);
  }

  get outputs(): GetfirstCouponDateCall__Outputs {
    return new GetfirstCouponDateCall__Outputs(this);
  }
}

export class GetfirstCouponDateCall__Inputs {
  _call: GetfirstCouponDateCall;

  constructor(call: GetfirstCouponDateCall) {
    this._call = call;
  }
}

export class GetfirstCouponDateCall__Outputs {
  _call: GetfirstCouponDateCall;

  constructor(call: GetfirstCouponDateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class ComputeNextCouponDateCall extends ethereum.Call {
  get inputs(): ComputeNextCouponDateCall__Inputs {
    return new ComputeNextCouponDateCall__Inputs(this);
  }

  get outputs(): ComputeNextCouponDateCall__Outputs {
    return new ComputeNextCouponDateCall__Outputs(this);
  }
}

export class ComputeNextCouponDateCall__Inputs {
  _call: ComputeNextCouponDateCall;

  constructor(call: ComputeNextCouponDateCall) {
    this._call = call;
  }
}

export class ComputeNextCouponDateCall__Outputs {
  _call: ComputeNextCouponDateCall;

  constructor(call: ComputeNextCouponDateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class GetcouponFrequencyInMonthsCall extends ethereum.Call {
  get inputs(): GetcouponFrequencyInMonthsCall__Inputs {
    return new GetcouponFrequencyInMonthsCall__Inputs(this);
  }

  get outputs(): GetcouponFrequencyInMonthsCall__Outputs {
    return new GetcouponFrequencyInMonthsCall__Outputs(this);
  }
}

export class GetcouponFrequencyInMonthsCall__Inputs {
  _call: GetcouponFrequencyInMonthsCall;

  constructor(call: GetcouponFrequencyInMonthsCall) {
    this._call = call;
  }
}

export class GetcouponFrequencyInMonthsCall__Outputs {
  _call: GetcouponFrequencyInMonthsCall;

  constructor(call: GetcouponFrequencyInMonthsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetinterestRateInBipsCall extends ethereum.Call {
  get inputs(): GetinterestRateInBipsCall__Inputs {
    return new GetinterestRateInBipsCall__Inputs(this);
  }

  get outputs(): GetinterestRateInBipsCall__Outputs {
    return new GetinterestRateInBipsCall__Outputs(this);
  }
}

export class GetinterestRateInBipsCall__Inputs {
  _call: GetinterestRateInBipsCall;

  constructor(call: GetinterestRateInBipsCall) {
    this._call = call;
  }

  get _currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetinterestRateInBipsCall__Outputs {
  _call: GetinterestRateInBipsCall;

  constructor(call: GetinterestRateInBipsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PayOutCall extends ethereum.Call {
  get inputs(): PayOutCall__Inputs {
    return new PayOutCall__Inputs(this);
  }

  get outputs(): PayOutCall__Outputs {
    return new PayOutCall__Outputs(this);
  }
}

export class PayOutCall__Inputs {
  _call: PayOutCall;

  constructor(call: PayOutCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _currency(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PayOutCall__Outputs {
  _call: PayOutCall;

  constructor(call: PayOutCall) {
    this._call = call;
  }
}
