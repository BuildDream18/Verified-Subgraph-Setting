// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Issuer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("issuer", Value.fromBytes(Bytes.empty()));
    this.set("tokenName", Value.fromBytes(Bytes.empty()));
    this.set("tokenType", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Issuer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Issuer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Issuer", id.toString(), this);
    }
  }

  static load(id: string): Issuer | null {
    return changetype<Issuer | null>(store.get("Issuer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issuer(): Bytes {
    let value = this.get("issuer");
    return value!.toBytes();
  }

  set issuer(value: Bytes) {
    this.set("issuer", Value.fromBytes(value));
  }

  get tokenName(): Bytes {
    let value = this.get("tokenName");
    return value!.toBytes();
  }

  set tokenName(value: Bytes) {
    this.set("tokenName", Value.fromBytes(value));
  }

  get tokenType(): Bytes {
    let value = this.get("tokenType");
    return value!.toBytes();
  }

  set tokenType(value: Bytes) {
    this.set("tokenType", Value.fromBytes(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("tokenName", Value.fromBytes(Bytes.empty()));
    this.set("tokenType", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get tokenName(): Bytes {
    let value = this.get("tokenName");
    return value!.toBytes();
  }

  set tokenName(value: Bytes) {
    this.set("tokenName", Value.fromBytes(value));
  }

  get tokenType(): Bytes {
    let value = this.get("tokenType");
    return value!.toBytes();
  }

  set tokenType(value: Bytes) {
    this.set("tokenType", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get AllCashIssues(): Array<string> {
    let value = this.get("AllCashIssues");
    return value!.toStringArray();
  }

  set AllCashIssues(value: Array<string>) {
    this.set("AllCashIssues", Value.fromStringArray(value));
  }

  get AllCashDeposits(): Array<string> {
    let value = this.get("AllCashDeposits");
    return value!.toStringArray();
  }

  set AllCashDeposits(value: Array<string>) {
    this.set("AllCashDeposits", Value.fromStringArray(value));
  }

  get AllCashRedemptions(): Array<string> {
    let value = this.get("AllCashRedemptions");
    return value!.toStringArray();
  }

  set AllCashRedemptions(value: Array<string>) {
    this.set("AllCashRedemptions", Value.fromStringArray(value));
  }

  get AllCashTransfers(): Array<string> {
    let value = this.get("AllCashTransfers");
    return value!.toStringArray();
  }

  set AllCashTransfers(value: Array<string>) {
    this.set("AllCashTransfers", Value.fromStringArray(value));
  }

  get AllCashReceipts(): Array<string> {
    let value = this.get("AllCashReceipts");
    return value!.toStringArray();
  }

  set AllCashReceipts(value: Array<string>) {
    this.set("AllCashReceipts", Value.fromStringArray(value));
  }

  get AllBondIssues(): Array<string> {
    let value = this.get("AllBondIssues");
    return value!.toStringArray();
  }

  set AllBondIssues(value: Array<string>) {
    this.set("AllBondIssues", Value.fromStringArray(value));
  }

  get AllBondPurchases(): Array<string> {
    let value = this.get("AllBondPurchases");
    return value!.toStringArray();
  }

  set AllBondPurchases(value: Array<string>) {
    this.set("AllBondPurchases", Value.fromStringArray(value));
  }

  get AllBondRedemptions(): Array<string> {
    let value = this.get("AllBondRedemptions");
    return value!.toStringArray();
  }

  set AllBondRedemptions(value: Array<string>) {
    this.set("AllBondRedemptions", Value.fromStringArray(value));
  }

  get AllBondLiquidations(): Array<string> {
    let value = this.get("AllBondLiquidations");
    return value!.toStringArray();
  }

  set AllBondLiquidations(value: Array<string>) {
    this.set("AllBondLiquidations", Value.fromStringArray(value));
  }

  get AllSecurityTransfers(): Array<string> {
    let value = this.get("AllSecurityTransfers");
    return value!.toStringArray();
  }

  set AllSecurityTransfers(value: Array<string>) {
    this.set("AllSecurityTransfers", Value.fromStringArray(value));
  }

  get AllSecurityReceipts(): Array<string> {
    let value = this.get("AllSecurityReceipts");
    return value!.toStringArray();
  }

  set AllSecurityReceipts(value: Array<string>) {
    this.set("AllSecurityReceipts", Value.fromStringArray(value));
  }
}

export class CashIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashIssues entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashIssues", id.toString(), this);
    }
  }

  static load(id: string): CashIssues | null {
    return changetype<CashIssues | null>(store.get("CashIssues", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CashDeposits extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashDeposits entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashDeposits entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashDeposits", id.toString(), this);
    }
  }

  static load(id: string): CashDeposits | null {
    return changetype<CashDeposits | null>(store.get("CashDeposits", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CashRedemptions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashRedemptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashRedemptions entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashRedemptions", id.toString(), this);
    }
  }

  static load(id: string): CashRedemptions | null {
    return changetype<CashRedemptions | null>(store.get("CashRedemptions", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CashTransfers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("counterparty", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashTransfers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashTransfers entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashTransfers", id.toString(), this);
    }
  }

  static load(id: string): CashTransfers | null {
    return changetype<CashTransfers | null>(store.get("CashTransfers", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get counterparty(): string {
    let value = this.get("counterparty");
    return value!.toString();
  }

  set counterparty(value: string) {
    this.set("counterparty", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Currency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Currency entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Currency entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Currency", id.toString(), this);
    }
  }

  static load(id: string): Currency | null {
    return changetype<Currency | null>(store.get("Currency", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get CashIssues(): Array<string> {
    let value = this.get("CashIssues");
    return value!.toStringArray();
  }

  set CashIssues(value: Array<string>) {
    this.set("CashIssues", Value.fromStringArray(value));
  }

  get CashDeposits(): Array<string> {
    let value = this.get("CashDeposits");
    return value!.toStringArray();
  }

  set CashDeposits(value: Array<string>) {
    this.set("CashDeposits", Value.fromStringArray(value));
  }

  get CashRedemptions(): Array<string> {
    let value = this.get("CashRedemptions");
    return value!.toStringArray();
  }

  set CashRedemptions(value: Array<string>) {
    this.set("CashRedemptions", Value.fromStringArray(value));
  }

  get CashTransfers(): Array<string> {
    let value = this.get("CashTransfers");
    return value!.toStringArray();
  }

  set CashTransfers(value: Array<string>) {
    this.set("CashTransfers", Value.fromStringArray(value));
  }

  get BondIssues(): Array<string> {
    let value = this.get("BondIssues");
    return value!.toStringArray();
  }

  set BondIssues(value: Array<string>) {
    this.set("BondIssues", Value.fromStringArray(value));
  }

  get BondPurchases(): Array<string> {
    let value = this.get("BondPurchases");
    return value!.toStringArray();
  }

  set BondPurchases(value: Array<string>) {
    this.set("BondPurchases", Value.fromStringArray(value));
  }

  get BondRedemptions(): Array<string> {
    let value = this.get("BondRedemptions");
    return value!.toStringArray();
  }

  set BondRedemptions(value: Array<string>) {
    this.set("BondRedemptions", Value.fromStringArray(value));
  }

  get BondLiquidations(): Array<string> {
    let value = this.get("BondLiquidations");
    return value!.toStringArray();
  }

  set BondLiquidations(value: Array<string>) {
    this.set("BondLiquidations", Value.fromStringArray(value));
  }
}

export class BondIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("bondName", Value.fromString(""));
    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("collateralAmount", Value.fromBigInt(BigInt.zero()));
    this.set("issueTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondIssues entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondIssues", id.toString(), this);
    }
  }

  static load(id: string): BondIssues | null {
    return changetype<BondIssues | null>(store.get("BondIssues", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): string {
    let value = this.get("bondName");
    return value!.toString();
  }

  set bondName(value: string) {
    this.set("bondName", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get collateralAmount(): BigInt {
    let value = this.get("collateralAmount");
    return value!.toBigInt();
  }

  set collateralAmount(value: BigInt) {
    this.set("collateralAmount", Value.fromBigInt(value));
  }

  get issueTime(): BigInt {
    let value = this.get("issueTime");
    return value!.toBigInt();
  }

  set issueTime(value: BigInt) {
    this.set("issueTime", Value.fromBigInt(value));
  }
}

export class BondPurchases extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("bondName", Value.fromString(""));
    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("paidInAmount", Value.fromBigInt(BigInt.zero()));
    this.set("purchaseTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondPurchases entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondPurchases entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondPurchases", id.toString(), this);
    }
  }

  static load(id: string): BondPurchases | null {
    return changetype<BondPurchases | null>(store.get("BondPurchases", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): string {
    let value = this.get("bondName");
    return value!.toString();
  }

  set bondName(value: string) {
    this.set("bondName", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get paidInAmount(): BigInt {
    let value = this.get("paidInAmount");
    return value!.toBigInt();
  }

  set paidInAmount(value: BigInt) {
    this.set("paidInAmount", Value.fromBigInt(value));
  }

  get purchaseTime(): BigInt {
    let value = this.get("purchaseTime");
    return value!.toBigInt();
  }

  set purchaseTime(value: BigInt) {
    this.set("purchaseTime", Value.fromBigInt(value));
  }
}

export class BondRedemptions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("bondName", Value.fromString(""));
    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondRedemptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondRedemptions entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondRedemptions", id.toString(), this);
    }
  }

  static load(id: string): BondRedemptions | null {
    return changetype<BondRedemptions | null>(store.get("BondRedemptions", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): string {
    let value = this.get("bondName");
    return value!.toString();
  }

  set bondName(value: string) {
    this.set("bondName", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class BondLiquidations extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("bondName", Value.fromString(""));
    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondLiquidations entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondLiquidations entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondLiquidations", id.toString(), this);
    }
  }

  static load(id: string): BondLiquidations | null {
    return changetype<BondLiquidations | null>(
      store.get("BondLiquidations", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): string {
    let value = this.get("bondName");
    return value!.toString();
  }

  set bondName(value: string) {
    this.set("bondName", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Bond extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bond entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bond entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bond", id.toString(), this);
    }
  }

  static load(id: string): Bond | null {
    return changetype<Bond | null>(store.get("Bond", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get BondIssues(): Array<string> {
    let value = this.get("BondIssues");
    return value!.toStringArray();
  }

  set BondIssues(value: Array<string>) {
    this.set("BondIssues", Value.fromStringArray(value));
  }

  get BondPurchases(): Array<string> {
    let value = this.get("BondPurchases");
    return value!.toStringArray();
  }

  set BondPurchases(value: Array<string>) {
    this.set("BondPurchases", Value.fromStringArray(value));
  }

  get BondRedemptions(): Array<string> {
    let value = this.get("BondRedemptions");
    return value!.toStringArray();
  }

  set BondRedemptions(value: Array<string>) {
    this.set("BondRedemptions", Value.fromStringArray(value));
  }

  get BondLiquidations(): Array<string> {
    let value = this.get("BondLiquidations");
    return value!.toStringArray();
  }

  set BondLiquidations(value: Array<string>) {
    this.set("BondLiquidations", Value.fromStringArray(value));
  }
}

export class Holder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("holder", Value.fromBytes(Bytes.empty()));
    this.set("holderName", Value.fromBytes(Bytes.empty()));
    this.set("accountCreator", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Holder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Holder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Holder", id.toString(), this);
    }
  }

  static load(id: string): Holder | null {
    return changetype<Holder | null>(store.get("Holder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get holder(): Bytes {
    let value = this.get("holder");
    return value!.toBytes();
  }

  set holder(value: Bytes) {
    this.set("holder", Value.fromBytes(value));
  }

  get holderName(): Bytes {
    let value = this.get("holderName");
    return value!.toBytes();
  }

  set holderName(value: Bytes) {
    this.set("holderName", Value.fromBytes(value));
  }

  get accountCreator(): string {
    let value = this.get("accountCreator");
    return value!.toString();
  }

  set accountCreator(value: string) {
    this.set("accountCreator", Value.fromString(value));
  }
}

export class Ledger extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ledger", Value.fromBytes(Bytes.empty()));
    this.set("ledgerName", Value.fromBytes(Bytes.empty()));
    this.set("group", Value.fromBytes(Bytes.empty()));
    this.set("holder", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ledger entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Ledger entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Ledger", id.toString(), this);
    }
  }

  static load(id: string): Ledger | null {
    return changetype<Ledger | null>(store.get("Ledger", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ledger(): Bytes {
    let value = this.get("ledger");
    return value!.toBytes();
  }

  set ledger(value: Bytes) {
    this.set("ledger", Value.fromBytes(value));
  }

  get ledgerName(): Bytes {
    let value = this.get("ledgerName");
    return value!.toBytes();
  }

  set ledgerName(value: Bytes) {
    this.set("ledgerName", Value.fromBytes(value));
  }

  get group(): Bytes {
    let value = this.get("group");
    return value!.toBytes();
  }

  set group(value: Bytes) {
    this.set("group", Value.fromBytes(value));
  }

  get holder(): string {
    let value = this.get("holder");
    return value!.toString();
  }

  set holder(value: string) {
    this.set("holder", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("accountName", Value.fromBytes(Bytes.empty()));
    this.set("ledger", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get accountName(): Bytes {
    let value = this.get("accountName");
    return value!.toBytes();
  }

  set accountName(value: Bytes) {
    this.set("accountName", Value.fromBytes(value));
  }

  get ledger(): string {
    let value = this.get("ledger");
    return value!.toString();
  }

  set ledger(value: string) {
    this.set("ledger", Value.fromString(value));
  }
}

export class Entry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("accountAddress", Value.fromBytes(Bytes.empty()));
    this.set("accountName", Value.fromBytes(Bytes.empty()));
    this.set("txDate", Value.fromBigInt(BigInt.zero()));
    this.set("party", Value.fromString(""));
    this.set("txType", Value.fromBytes(Bytes.empty()));
    this.set("txDescription", Value.fromBytes(Bytes.empty()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("txAmount", Value.fromBigInt(BigInt.zero()));
    this.set("voucherType", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Entry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Entry entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Entry", id.toString(), this);
    }
  }

  static load(id: string): Entry | null {
    return changetype<Entry | null>(store.get("Entry", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountAddress(): Bytes {
    let value = this.get("accountAddress");
    return value!.toBytes();
  }

  set accountAddress(value: Bytes) {
    this.set("accountAddress", Value.fromBytes(value));
  }

  get accountName(): Bytes {
    let value = this.get("accountName");
    return value!.toBytes();
  }

  set accountName(value: Bytes) {
    this.set("accountName", Value.fromBytes(value));
  }

  get txDate(): BigInt {
    let value = this.get("txDate");
    return value!.toBigInt();
  }

  set txDate(value: BigInt) {
    this.set("txDate", Value.fromBigInt(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get txType(): Bytes {
    let value = this.get("txType");
    return value!.toBytes();
  }

  set txType(value: Bytes) {
    this.set("txType", Value.fromBytes(value));
  }

  get txDescription(): Bytes {
    let value = this.get("txDescription");
    return value!.toBytes();
  }

  set txDescription(value: Bytes) {
    this.set("txDescription", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get txAmount(): BigInt {
    let value = this.get("txAmount");
    return value!.toBigInt();
  }

  set txAmount(value: BigInt) {
    this.set("txAmount", Value.fromBigInt(value));
  }

  get voucherType(): Bytes {
    let value = this.get("voucherType");
    return value!.toBytes();
  }

  set voucherType(value: Bytes) {
    this.set("voucherType", Value.fromBytes(value));
  }
}

export class Security extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromBytes(Bytes.empty()));
    this.set("company", Value.fromBytes(Bytes.empty()));
    this.set("ISIN", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Security entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Security entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Security", id.toString(), this);
    }
  }

  static load(id: string): Security | null {
    return changetype<Security | null>(store.get("Security", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): Bytes {
    let value = this.get("security");
    return value!.toBytes();
  }

  set security(value: Bytes) {
    this.set("security", Value.fromBytes(value));
  }

  get company(): Bytes {
    let value = this.get("company");
    return value!.toBytes();
  }

  set company(value: Bytes) {
    this.set("company", Value.fromBytes(value));
  }

  get ISIN(): Bytes {
    let value = this.get("ISIN");
    return value!.toBytes();
  }

  set ISIN(value: Bytes) {
    this.set("ISIN", Value.fromBytes(value));
  }
}

export class Company extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromString(""));
    this.set("corporateAction", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Company entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Company entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Company", id.toString(), this);
    }
  }

  static load(id: string): Company | null {
    return changetype<Company | null>(store.get("Company", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get corporateAction(): string {
    let value = this.get("corporateAction");
    return value!.toString();
  }

  set corporateAction(value: string) {
    this.set("corporateAction", Value.fromString(value));
  }
}

export class ISIN extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("company", Value.fromString(""));
    this.set("security", Value.fromString(""));
    this.set("corporateAction", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ISIN entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ISIN entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ISIN", id.toString(), this);
    }
  }

  static load(id: string): ISIN | null {
    return changetype<ISIN | null>(store.get("ISIN", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get company(): string {
    let value = this.get("company");
    return value!.toString();
  }

  set company(value: string) {
    this.set("company", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get corporateAction(): string {
    let value = this.get("corporateAction");
    return value!.toString();
  }

  set corporateAction(value: string) {
    this.set("corporateAction", Value.fromString(value));
  }
}

export class CorporateAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromString(""));
    this.set("company", Value.fromBytes(Bytes.empty()));
    this.set("ISIN", Value.fromBytes(Bytes.empty()));
    this.set("category", Value.fromBytes(Bytes.empty()));
    this.set("action", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CorporateAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CorporateAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CorporateAction", id.toString(), this);
    }
  }

  static load(id: string): CorporateAction | null {
    return changetype<CorporateAction | null>(store.get("CorporateAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get company(): Bytes {
    let value = this.get("company");
    return value!.toBytes();
  }

  set company(value: Bytes) {
    this.set("company", Value.fromBytes(value));
  }

  get ISIN(): Bytes {
    let value = this.get("ISIN");
    return value!.toBytes();
  }

  set ISIN(value: Bytes) {
    this.set("ISIN", Value.fromBytes(value));
  }

  get category(): Bytes {
    let value = this.get("category");
    return value!.toBytes();
  }

  set category(value: Bytes) {
    this.set("category", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    return value!.toString();
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }
}

export class SecurityTransfers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SecurityTransfers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SecurityTransfers entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SecurityTransfers", id.toString(), this);
    }
  }

  static load(id: string): SecurityTransfers | null {
    return changetype<SecurityTransfers | null>(
      store.get("SecurityTransfers", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("cash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value!.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get cash(): string {
    let value = this.get("cash");
    return value!.toString();
  }

  set cash(value: string) {
    this.set("cash", Value.fromString(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("orderReference", Value.fromBytes(Bytes.empty()));
    this.set("party", Value.fromString(""));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("trigger", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("order", Value.fromBytes(Bytes.empty()));
    this.set("orderType", Value.fromBytes(Bytes.empty()));
    this.set("date", Value.fromBigInt(BigInt.zero()));
    this.set("status", Value.fromBytes(Bytes.empty()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("securityName", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Order entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orderReference(): Bytes {
    let value = this.get("orderReference");
    return value!.toBytes();
  }

  set orderReference(value: Bytes) {
    this.set("orderReference", Value.fromBytes(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get trigger(): BigInt {
    let value = this.get("trigger");
    return value!.toBigInt();
  }

  set trigger(value: BigInt) {
    this.set("trigger", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get order(): Bytes {
    let value = this.get("order");
    return value!.toBytes();
  }

  set order(value: Bytes) {
    this.set("order", Value.fromBytes(value));
  }

  get orderType(): Bytes {
    let value = this.get("orderType");
    return value!.toBytes();
  }

  set orderType(value: Bytes) {
    this.set("orderType", Value.fromBytes(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get status(): Bytes {
    let value = this.get("status");
    return value!.toBytes();
  }

  set status(value: Bytes) {
    this.set("status", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get securityName(): Bytes {
    let value = this.get("securityName");
    return value!.toBytes();
  }

  set securityName(value: Bytes) {
    this.set("securityName", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }
}

export class OrderReference extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("reference", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderReference entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OrderReference entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OrderReference", id.toString(), this);
    }
  }

  static load(id: string): OrderReference | null {
    return changetype<OrderReference | null>(store.get("OrderReference", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reference(): string {
    let value = this.get("reference");
    return value!.toString();
  }

  set reference(value: string) {
    this.set("reference", Value.fromString(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("partyReference", Value.fromString(""));
    this.set("counterpartyReference", Value.fromString(""));
    this.set("isin", Value.fromBytes(Bytes.empty()));
    this.set("company", Value.fromBytes(Bytes.empty()));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("askprice", Value.fromBigInt(BigInt.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("status", Value.fromBytes(Bytes.empty()));
    this.set("executionDate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Trade entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get partyReference(): string {
    let value = this.get("partyReference");
    return value!.toString();
  }

  set partyReference(value: string) {
    this.set("partyReference", Value.fromString(value));
  }

  get counterpartyReference(): string {
    let value = this.get("counterpartyReference");
    return value!.toString();
  }

  set counterpartyReference(value: string) {
    this.set("counterpartyReference", Value.fromString(value));
  }

  get isin(): Bytes {
    let value = this.get("isin");
    return value!.toBytes();
  }

  set isin(value: Bytes) {
    this.set("isin", Value.fromBytes(value));
  }

  get company(): Bytes {
    let value = this.get("company");
    return value!.toBytes();
  }

  set company(value: Bytes) {
    this.set("company", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get askprice(): BigInt {
    let value = this.get("askprice");
    return value!.toBigInt();
  }

  set askprice(value: BigInt) {
    this.set("askprice", Value.fromBigInt(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get status(): Bytes {
    let value = this.get("status");
    return value!.toBytes();
  }

  set status(value: Bytes) {
    this.set("status", Value.fromBytes(value));
  }

  get executionDate(): BigInt {
    let value = this.get("executionDate");
    return value!.toBigInt();
  }

  set executionDate(value: BigInt) {
    this.set("executionDate", Value.fromBigInt(value));
  }
}

export class Settlement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("partyReference", Value.fromString(""));
    this.set("counterpartyReference", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Settlement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Settlement entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Settlement", id.toString(), this);
    }
  }

  static load(id: string): Settlement | null {
    return changetype<Settlement | null>(store.get("Settlement", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get partyReference(): string {
    let value = this.get("partyReference");
    return value!.toString();
  }

  set partyReference(value: string) {
    this.set("partyReference", Value.fromString(value));
  }

  get counterpartyReference(): string {
    let value = this.get("counterpartyReference");
    return value!.toString();
  }

  set counterpartyReference(value: string) {
    this.set("counterpartyReference", Value.fromString(value));
  }
}

export class Product extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("issue", Value.fromBytes(Bytes.empty()));
    this.set("productReference", Value.fromBytes(Bytes.empty()));
    this.set("productCategory", Value.fromBytes(Bytes.empty()));
    this.set("issuerName", Value.fromBytes(Bytes.empty()));
    this.set("registrationDocs", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Product entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Product entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Product", id.toString(), this);
    }
  }

  static load(id: string): Product | null {
    return changetype<Product | null>(store.get("Product", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issue(): Bytes {
    let value = this.get("issue");
    return value!.toBytes();
  }

  set issue(value: Bytes) {
    this.set("issue", Value.fromBytes(value));
  }

  get productReference(): Bytes {
    let value = this.get("productReference");
    return value!.toBytes();
  }

  set productReference(value: Bytes) {
    this.set("productReference", Value.fromBytes(value));
  }

  get productCategory(): Bytes {
    let value = this.get("productCategory");
    return value!.toBytes();
  }

  set productCategory(value: Bytes) {
    this.set("productCategory", Value.fromBytes(value));
  }

  get issuerName(): Bytes {
    let value = this.get("issuerName");
    return value!.toBytes();
  }

  set issuerName(value: Bytes) {
    this.set("issuerName", Value.fromBytes(value));
  }

  get registrationDocs(): string {
    let value = this.get("registrationDocs");
    return value!.toString();
  }

  set registrationDocs(value: string) {
    this.set("registrationDocs", Value.fromString(value));
  }
}

export class Issue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("issueSize", Value.fromBigInt(BigInt.zero()));
    this.set("offerPrice", Value.fromBigInt(BigInt.zero()));
    this.set("minAskPrice", Value.fromBigInt(BigInt.zero()));
    this.set("minSubscription", Value.fromBigInt(BigInt.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("issue", Value.fromBytes(Bytes.empty()));
    this.set("offerType", Value.fromBytes(Bytes.empty()));
    this.set("isin", Value.fromBytes(Bytes.empty()));
    this.set("status", Value.fromBytes(Bytes.empty()));
    this.set("productCategory", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Issue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Issue entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Issue", id.toString(), this);
    }
  }

  static load(id: string): Issue | null {
    return changetype<Issue | null>(store.get("Issue", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issueSize(): BigInt {
    let value = this.get("issueSize");
    return value!.toBigInt();
  }

  set issueSize(value: BigInt) {
    this.set("issueSize", Value.fromBigInt(value));
  }

  get offerPrice(): BigInt {
    let value = this.get("offerPrice");
    return value!.toBigInt();
  }

  set offerPrice(value: BigInt) {
    this.set("offerPrice", Value.fromBigInt(value));
  }

  get minAskPrice(): BigInt {
    let value = this.get("minAskPrice");
    return value!.toBigInt();
  }

  set minAskPrice(value: BigInt) {
    this.set("minAskPrice", Value.fromBigInt(value));
  }

  get minSubscription(): BigInt {
    let value = this.get("minSubscription");
    return value!.toBigInt();
  }

  set minSubscription(value: BigInt) {
    this.set("minSubscription", Value.fromBigInt(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get issue(): Bytes {
    let value = this.get("issue");
    return value!.toBytes();
  }

  set issue(value: Bytes) {
    this.set("issue", Value.fromBytes(value));
  }

  get offerType(): Bytes {
    let value = this.get("offerType");
    return value!.toBytes();
  }

  set offerType(value: Bytes) {
    this.set("offerType", Value.fromBytes(value));
  }

  get isin(): Bytes {
    let value = this.get("isin");
    return value!.toBytes();
  }

  set isin(value: Bytes) {
    this.set("isin", Value.fromBytes(value));
  }

  get status(): Bytes {
    let value = this.get("status");
    return value!.toBytes();
  }

  set status(value: Bytes) {
    this.set("status", Value.fromBytes(value));
  }

  get productCategory(): Bytes {
    let value = this.get("productCategory");
    return value!.toBytes();
  }

  set productCategory(value: Bytes) {
    this.set("productCategory", Value.fromBytes(value));
  }
}
