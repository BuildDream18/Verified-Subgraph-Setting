// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get security(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get cash(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ProxyCreated extends ethereum.Event {
  get params(): ProxyCreated__Params {
    return new ProxyCreated__Params(this);
  }
}

export class ProxyCreated__Params {
  _event: ProxyCreated;

  constructor(event: ProxyCreated) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolFactory extends ethereum.SmartContract {
  static bind(address: Address): PoolFactory {
    return new PoolFactory("PoolFactory", address);
  }

  getSigner(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): Address {
    let result = super.call(
      "getSigner",
      "getSigner(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );

    return result[0].toAddress();
  }

  try_getSigner(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSigner",
      "getSigner(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploySigned(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): Address {
    let result = super.call(
      "deploySigned",
      "deploySigned(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );

    return result[0].toAddress();
  }

  try_deploySigned(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploySigned",
      "deploySigned(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes
  ): Address {
    let result = super.call(
      "deploy",
      "deploy(uint256,address,address,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy",
      "deploy(uint256,address,address,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeploymentAddress(_salt: BigInt, _sender: Address): Address {
    let result = super.call(
      "getDeploymentAddress",
      "getDeploymentAddress(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_sender)
      ]
    );

    return result[0].toAddress();
  }

  try_getDeploymentAddress(
    _salt: BigInt,
    _sender: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDeploymentAddress",
      "getDeploymentAddress(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployMinimal(_logic: Address, _data: Bytes): Address {
    let result = super.call(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );

    return result[0].toAddress();
  }

  try_deployMinimal(
    _logic: Address,
    _data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPool(_security: Address, _cash: Address): Address {
    let result = super.call("getPool", "getPool(address,address):(address)", [
      ethereum.Value.fromAddress(_security),
      ethereum.Value.fromAddress(_cash)
    ]);

    return result[0].toAddress();
  }

  try_getPool(
    _security: Address,
    _cash: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPool",
      "getPool(address,address):(address)",
      [ethereum.Value.fromAddress(_security), ethereum.Value.fromAddress(_cash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  confirmPool(_pair: Address): boolean {
    let result = super.call("confirmPool", "confirmPool(address):(bool)", [
      ethereum.Value.fromAddress(_pair)
    ]);

    return result[0].toBoolean();
  }

  try_confirmPool(_pair: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("confirmPool", "confirmPool(address):(bool)", [
      ethereum.Value.fromAddress(_pair)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class DeploySignedCall extends ethereum.Call {
  get inputs(): DeploySignedCall__Inputs {
    return new DeploySignedCall__Inputs(this);
  }

  get outputs(): DeploySignedCall__Outputs {
    return new DeploySignedCall__Outputs(this);
  }
}

export class DeploySignedCall__Inputs {
  _call: DeploySignedCall;

  constructor(call: DeploySignedCall) {
    this._call = call;
  }

  get _salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _logic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DeploySignedCall__Outputs {
  _call: DeploySignedCall;

  constructor(call: DeploySignedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get _salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _logic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployMinimalCall extends ethereum.Call {
  get inputs(): DeployMinimalCall__Inputs {
    return new DeployMinimalCall__Inputs(this);
  }

  get outputs(): DeployMinimalCall__Outputs {
    return new DeployMinimalCall__Outputs(this);
  }
}

export class DeployMinimalCall__Inputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get _logic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployMinimalCall__Outputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _viaFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orderPool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tradeContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _posttradeContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _securitiesRegistry(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get _security(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _cash(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _currency(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _settlementType(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}
