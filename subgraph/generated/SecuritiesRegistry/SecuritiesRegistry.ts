// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SecurityCreated extends ethereum.Event {
  get params(): SecurityCreated__Params {
    return new SecurityCreated__Params(this);
  }
}

export class SecurityCreated__Params {
  _event: SecurityCreated;

  constructor(event: SecurityCreated) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get company(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get isin(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class CorporateAction extends ethereum.Event {
  get params(): CorporateAction__Params {
    return new CorporateAction__Params(this);
  }
}

export class CorporateAction__Params {
  _event: CorporateAction;

  constructor(event: CorporateAction) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get company(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get isin(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get category(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get action(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class ProxyCreated extends ethereum.Event {
  get params(): ProxyCreated__Params {
    return new ProxyCreated__Params(this);
  }
}

export class ProxyCreated__Params {
  _event: ProxyCreated;

  constructor(event: ProxyCreated) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SecuritiesRegistry__getSecurityDetailsResultValue0Struct extends ethereum.Tuple {
  get company(): Bytes {
    return this[0].toBytes();
  }

  get currency(): Bytes {
    return this[1].toBytes();
  }

  get isin(): Bytes {
    return this[2].toBytes();
  }

  get creditScore(): Bytes {
    return this[3].toBytes();
  }

  get price(): Bytes {
    return this[4].toBytes();
  }

  get issuer(): Address {
    return this[5].toAddress();
  }
}

export class SecuritiesRegistry extends ethereum.SmartContract {
  static bind(address: Address): SecuritiesRegistry {
    return new SecuritiesRegistry("SecuritiesRegistry", address);
  }

  getSigner(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): Address {
    let result = super.call(
      "getSigner",
      "getSigner(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );

    return result[0].toAddress();
  }

  try_getSigner(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSigner",
      "getSigner(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploySigned(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): Address {
    let result = super.call(
      "deploySigned",
      "deploySigned(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );

    return result[0].toAddress();
  }

  try_deploySigned(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploySigned",
      "deploySigned(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes
  ): Address {
    let result = super.call(
      "deploy",
      "deploy(uint256,address,address,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy",
      "deploy(uint256,address,address,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeploymentAddress(_salt: BigInt, _sender: Address): Address {
    let result = super.call(
      "getDeploymentAddress",
      "getDeploymentAddress(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_sender)
      ]
    );

    return result[0].toAddress();
  }

  try_getDeploymentAddress(
    _salt: BigInt,
    _sender: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDeploymentAddress",
      "getDeploymentAddress(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deployMinimal(_logic: Address, _data: Bytes): Address {
    let result = super.call(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );

    return result[0].toAddress();
  }

  try_deployMinimal(
    _logic: Address,
    _data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getToken(_currency: Bytes, _company: Bytes, _isin: Bytes): Address {
    let result = super.call(
      "getToken",
      "getToken(bytes32,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(_currency),
        ethereum.Value.fromFixedBytes(_company),
        ethereum.Value.fromFixedBytes(_isin)
      ]
    );

    return result[0].toAddress();
  }

  try_getToken(
    _currency: Bytes,
    _company: Bytes,
    _isin: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getToken",
      "getToken(bytes32,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(_currency),
        ethereum.Value.fromFixedBytes(_company),
        ethereum.Value.fromFixedBytes(_isin)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSecuritiesIssued(): Array<Address> {
    let result = super.call(
      "getSecuritiesIssued",
      "getSecuritiesIssued():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getSecuritiesIssued(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSecuritiesIssued",
      "getSecuritiesIssued():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getSecuritiesInvested(): Array<Address> {
    let result = super.call(
      "getSecuritiesInvested",
      "getSecuritiesInvested():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getSecuritiesInvested(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSecuritiesInvested",
      "getSecuritiesInvested():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getSecurityDetails(
    _securityToken: Address
  ): SecuritiesRegistry__getSecurityDetailsResultValue0Struct {
    let result = super.call(
      "getSecurityDetails",
      "getSecurityDetails(address):((bytes32,bytes32,bytes32,bytes32,bytes16,address))",
      [ethereum.Value.fromAddress(_securityToken)]
    );

    return changetype<SecuritiesRegistry__getSecurityDetailsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSecurityDetails(
    _securityToken: Address
  ): ethereum.CallResult<
    SecuritiesRegistry__getSecurityDetailsResultValue0Struct
  > {
    let result = super.tryCall(
      "getSecurityDetails",
      "getSecurityDetails(address):((bytes32,bytes32,bytes32,bytes32,bytes16,address))",
      [ethereum.Value.fromAddress(_securityToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SecuritiesRegistry__getSecurityDetailsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  isIsinPresent(_isin: Bytes): boolean {
    let result = super.call("isIsinPresent", "isIsinPresent(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_isin)
    ]);

    return result[0].toBoolean();
  }

  try_isIsinPresent(_isin: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isIsinPresent",
      "isIsinPresent(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_isin)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCorporateActions(_isin: Bytes, _category: Bytes): Array<string> {
    let result = super.call(
      "getCorporateActions",
      "getCorporateActions(bytes32,bytes32):(string[])",
      [
        ethereum.Value.fromFixedBytes(_isin),
        ethereum.Value.fromFixedBytes(_category)
      ]
    );

    return result[0].toStringArray();
  }

  try_getCorporateActions(
    _isin: Bytes,
    _category: Bytes
  ): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getCorporateActions",
      "getCorporateActions(bytes32,bytes32):(string[])",
      [
        ethereum.Value.fromFixedBytes(_isin),
        ethereum.Value.fromFixedBytes(_category)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getCreditScore(_isin: Bytes, _company: Bytes): Bytes {
    let result = super.call(
      "getCreditScore",
      "getCreditScore(bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_isin),
        ethereum.Value.fromFixedBytes(_company)
      ]
    );

    return result[0].toBytes();
  }

  try_getCreditScore(
    _isin: Bytes,
    _company: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getCreditScore",
      "getCreditScore(bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_isin),
        ethereum.Value.fromFixedBytes(_company)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getPrice(_isin: Bytes): Bytes {
    let result = super.call("getPrice", "getPrice(bytes32):(bytes16)", [
      ethereum.Value.fromFixedBytes(_isin)
    ]);

    return result[0].toBytes();
  }

  try_getPrice(_isin: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getPrice", "getPrice(bytes32):(bytes16)", [
      ethereum.Value.fromFixedBytes(_isin)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class DeploySignedCall extends ethereum.Call {
  get inputs(): DeploySignedCall__Inputs {
    return new DeploySignedCall__Inputs(this);
  }

  get outputs(): DeploySignedCall__Outputs {
    return new DeploySignedCall__Outputs(this);
  }
}

export class DeploySignedCall__Inputs {
  _call: DeploySignedCall;

  constructor(call: DeploySignedCall) {
    this._call = call;
  }

  get _salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _logic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DeploySignedCall__Outputs {
  _call: DeploySignedCall;

  constructor(call: DeploySignedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get _salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _logic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class DeployMinimalCall extends ethereum.Call {
  get inputs(): DeployMinimalCall__Inputs {
    return new DeployMinimalCall__Inputs(this);
  }

  get outputs(): DeployMinimalCall__Outputs {
    return new DeployMinimalCall__Outputs(this);
  }
}

export class DeployMinimalCall__Inputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get _logic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployMinimalCall__Outputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get _viaFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _poolFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _preTradeContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tradeContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _postTradeContract(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _clientContract(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class CreateSecurityCall extends ethereum.Call {
  get inputs(): CreateSecurityCall__Inputs {
    return new CreateSecurityCall__Inputs(this);
  }

  get outputs(): CreateSecurityCall__Outputs {
    return new CreateSecurityCall__Outputs(this);
  }
}

export class CreateSecurityCall__Inputs {
  _call: CreateSecurityCall;

  constructor(call: CreateSecurityCall) {
    this._call = call;
  }

  get _issuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _security(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _currency(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _company(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _isin(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _settlementBy(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class CreateSecurityCall__Outputs {
  _call: CreateSecurityCall;

  constructor(call: CreateSecurityCall) {
    this._call = call;
  }
}

export class IsIsinPresentCall extends ethereum.Call {
  get inputs(): IsIsinPresentCall__Inputs {
    return new IsIsinPresentCall__Inputs(this);
  }

  get outputs(): IsIsinPresentCall__Outputs {
    return new IsIsinPresentCall__Outputs(this);
  }
}

export class IsIsinPresentCall__Inputs {
  _call: IsIsinPresentCall;

  constructor(call: IsIsinPresentCall) {
    this._call = call;
  }

  get _isin(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class IsIsinPresentCall__Outputs {
  _call: IsIsinPresentCall;

  constructor(call: IsIsinPresentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RegisterCorporateActionCall extends ethereum.Call {
  get inputs(): RegisterCorporateActionCall__Inputs {
    return new RegisterCorporateActionCall__Inputs(this);
  }

  get outputs(): RegisterCorporateActionCall__Outputs {
    return new RegisterCorporateActionCall__Outputs(this);
  }
}

export class RegisterCorporateActionCall__Inputs {
  _call: RegisterCorporateActionCall;

  constructor(call: RegisterCorporateActionCall) {
    this._call = call;
  }

  get _category(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _action(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _isin(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RegisterCorporateActionCall__Outputs {
  _call: RegisterCorporateActionCall;

  constructor(call: RegisterCorporateActionCall) {
    this._call = call;
  }
}

export class RegisterCreditScoreCall extends ethereum.Call {
  get inputs(): RegisterCreditScoreCall__Inputs {
    return new RegisterCreditScoreCall__Inputs(this);
  }

  get outputs(): RegisterCreditScoreCall__Outputs {
    return new RegisterCreditScoreCall__Outputs(this);
  }
}

export class RegisterCreditScoreCall__Inputs {
  _call: RegisterCreditScoreCall;

  constructor(call: RegisterCreditScoreCall) {
    this._call = call;
  }

  get _company(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _isin(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _score(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RegisterCreditScoreCall__Outputs {
  _call: RegisterCreditScoreCall;

  constructor(call: RegisterCreditScoreCall) {
    this._call = call;
  }
}

export class RegisterPriceCall extends ethereum.Call {
  get inputs(): RegisterPriceCall__Inputs {
    return new RegisterPriceCall__Inputs(this);
  }

  get outputs(): RegisterPriceCall__Outputs {
    return new RegisterPriceCall__Outputs(this);
  }
}

export class RegisterPriceCall__Inputs {
  _call: RegisterPriceCall;

  constructor(call: RegisterPriceCall) {
    this._call = call;
  }

  get _isin(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _price(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RegisterPriceCall__Outputs {
  _call: RegisterPriceCall;

  constructor(call: RegisterPriceCall) {
    this._call = call;
  }
}
