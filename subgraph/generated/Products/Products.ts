// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProductIssued extends ethereum.Event {
  get params(): ProductIssued__Params {
    return new ProductIssued__Params(this);
  }
}

export class ProductIssued__Params {
  _event: ProductIssued;

  constructor(event: ProductIssued) {
    this._event = event;
  }

  get issue(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get productReference(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get productCategory(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get issuerName(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get registrationDocs(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class ProxyCreated extends ethereum.Event {
  get params(): ProxyCreated__Params {
    return new ProxyCreated__Params(this);
  }
}

export class ProxyCreated__Params {
  _event: ProxyCreated;

  constructor(event: ProxyCreated) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Products__getProductResultValue0Struct extends ethereum.Tuple {
  get productCategory(): Bytes {
    return this[0].toBytes();
  }

  get issuerName(): Bytes {
    return this[1].toBytes();
  }

  get issuerAddress(): Bytes {
    return this[2].toBytes();
  }

  get issuerCountry(): Bytes {
    return this[3].toBytes();
  }

  get issuerSignatoryEmail(): Bytes {
    return this[4].toBytes();
  }

  get arrangerName(): Bytes {
    return this[5].toBytes();
  }

  get arrangerAddress(): Bytes {
    return this[6].toBytes();
  }

  get arrangerCountry(): Bytes {
    return this[7].toBytes();
  }

  get arrangerSignatoryEmail(): Bytes {
    return this[8].toBytes();
  }

  get issue(): Address {
    return this[9].toAddress();
  }

  get issuer(): Address {
    return this[10].toAddress();
  }

  get status(): boolean {
    return this[11].toBoolean();
  }

  get issuerRegistrationCertificate(): string {
    return this[12].toString();
  }

  get arrangerRegistrationCertificate(): string {
    return this[13].toString();
  }

  get registrationDocuments(): string {
    return this[14].toString();
  }
}

export class Products__getCertificateResult {
  value0: string;
  value1: string;

  constructor(value0: string, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class Products extends ethereum.SmartContract {
  static bind(address: Address): Products {
    return new Products("Products", address);
  }

  getSigner(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): Address {
    let result = super.call(
      "getSigner",
      "getSigner(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );

    return result[0].toAddress();
  }

  try_getSigner(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSigner",
      "getSigner(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploySigned(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): Address {
    let result = super.call(
      "deploySigned",
      "deploySigned(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );

    return result[0].toAddress();
  }

  try_deploySigned(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes,
    _signature: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploySigned",
      "deploySigned(uint256,address,address,bytes,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBytes(_signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes
  ): Address {
    let result = super.call(
      "deploy",
      "deploy(uint256,address,address,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy(
    _salt: BigInt,
    _logic: Address,
    _admin: Address,
    _data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy",
      "deploy(uint256,address,address,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_logic),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeploymentAddress(_salt: BigInt, _sender: Address): Address {
    let result = super.call(
      "getDeploymentAddress",
      "getDeploymentAddress(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_sender)
      ]
    );

    return result[0].toAddress();
  }

  try_getDeploymentAddress(
    _salt: BigInt,
    _sender: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDeploymentAddress",
      "getDeploymentAddress(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_salt),
        ethereum.Value.fromAddress(_sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployMinimal(_logic: Address, _data: Bytes): Address {
    let result = super.call(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );

    return result[0].toAddress();
  }

  try_deployMinimal(
    _logic: Address,
    _data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployMinimal",
      "deployMinimal(address,bytes):(address)",
      [ethereum.Value.fromAddress(_logic), ethereum.Value.fromBytes(_data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProductsForClient(): Array<Bytes> {
    let result = super.call(
      "getProductsForClient",
      "getProductsForClient():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getProductsForClient(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getProductsForClient",
      "getProductsForClient():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getIssuesForClient(): Array<Address> {
    let result = super.call(
      "getIssuesForClient",
      "getIssuesForClient():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getIssuesForClient(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getIssuesForClient",
      "getIssuesForClient():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getProductsForCountry(_country: Bytes): Array<Bytes> {
    let result = super.call(
      "getProductsForCountry",
      "getProductsForCountry(bytes32):(bytes32[])",
      [ethereum.Value.fromFixedBytes(_country)]
    );

    return result[0].toBytesArray();
  }

  try_getProductsForCountry(
    _country: Bytes
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getProductsForCountry",
      "getProductsForCountry(bytes32):(bytes32[])",
      [ethereum.Value.fromFixedBytes(_country)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getIssuesForCountry(_country: Bytes): Array<Address> {
    let result = super.call(
      "getIssuesForCountry",
      "getIssuesForCountry(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(_country)]
    );

    return result[0].toAddressArray();
  }

  try_getIssuesForCountry(
    _country: Bytes
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getIssuesForCountry",
      "getIssuesForCountry(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(_country)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getProducts(): Array<Bytes> {
    let result = super.call("getProducts", "getProducts():(bytes32[])", []);

    return result[0].toBytesArray();
  }

  try_getProducts(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("getProducts", "getProducts():(bytes32[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getProduct(ref: Bytes): Products__getProductResultValue0Struct {
    let result = super.call(
      "getProduct",
      "getProduct(bytes32):((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,address,address,bool,string,string,string))",
      [ethereum.Value.fromFixedBytes(ref)]
    );

    return changetype<Products__getProductResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getProduct(
    ref: Bytes
  ): ethereum.CallResult<Products__getProductResultValue0Struct> {
    let result = super.tryCall(
      "getProduct",
      "getProduct(bytes32):((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,address,address,bool,string,string,string))",
      [ethereum.Value.fromFixedBytes(ref)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Products__getProductResultValue0Struct>(value[0].toTuple())
    );
  }

  getCertificate(_ref: Bytes): Products__getCertificateResult {
    let result = super.call(
      "getCertificate",
      "getCertificate(bytes32):(string,string)",
      [ethereum.Value.fromFixedBytes(_ref)]
    );

    return new Products__getCertificateResult(
      result[0].toString(),
      result[1].toString()
    );
  }

  try_getCertificate(
    _ref: Bytes
  ): ethereum.CallResult<Products__getCertificateResult> {
    let result = super.tryCall(
      "getCertificate",
      "getCertificate(bytes32):(string,string)",
      [ethereum.Value.fromFixedBytes(_ref)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Products__getCertificateResult(
        value[0].toString(),
        value[1].toString()
      )
    );
  }

  getIssue(_ref: Bytes): Address {
    let result = super.call("getIssue", "getIssue(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_ref)
    ]);

    return result[0].toAddress();
  }

  try_getIssue(_ref: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("getIssue", "getIssue(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_ref)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIssuerName(_ref: Bytes): Bytes {
    let result = super.call(
      "getIssuerName",
      "getIssuerName(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_ref)]
    );

    return result[0].toBytes();
  }

  try_getIssuerName(_ref: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getIssuerName",
      "getIssuerName(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_ref)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getIssuerAddress(_ref: Bytes): Address {
    let result = super.call(
      "getIssuerAddress",
      "getIssuerAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_ref)]
    );

    return result[0].toAddress();
  }

  try_getIssuerAddress(_ref: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getIssuerAddress",
      "getIssuerAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_ref)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkIssue(_issuer: Address): boolean {
    let result = super.call("checkIssue", "checkIssue(address):(bool)", [
      ethereum.Value.fromAddress(_issuer)
    ]);

    return result[0].toBoolean();
  }

  try_checkIssue(_issuer: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("checkIssue", "checkIssue(address):(bool)", [
      ethereum.Value.fromAddress(_issuer)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class DeploySignedCall extends ethereum.Call {
  get inputs(): DeploySignedCall__Inputs {
    return new DeploySignedCall__Inputs(this);
  }

  get outputs(): DeploySignedCall__Outputs {
    return new DeploySignedCall__Outputs(this);
  }
}

export class DeploySignedCall__Inputs {
  _call: DeploySignedCall;

  constructor(call: DeploySignedCall) {
    this._call = call;
  }

  get _salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _logic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DeploySignedCall__Outputs {
  _call: DeploySignedCall;

  constructor(call: DeploySignedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get _salt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _logic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployMinimalCall extends ethereum.Call {
  get inputs(): DeployMinimalCall__Inputs {
    return new DeployMinimalCall__Inputs(this);
  }

  get outputs(): DeployMinimalCall__Outputs {
    return new DeployMinimalCall__Outputs(this);
  }
}

export class DeployMinimalCall__Inputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get _logic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployMinimalCall__Outputs {
  _call: DeployMinimalCall;

  constructor(call: DeployMinimalCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _client(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _kyc(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _issueContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _securityContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _securityRegistriesContract(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _viaFactoryContract(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RecordProductCall extends ethereum.Call {
  get inputs(): RecordProductCall__Inputs {
    return new RecordProductCall__Inputs(this);
  }

  get outputs(): RecordProductCall__Outputs {
    return new RecordProductCall__Outputs(this);
  }
}

export class RecordProductCall__Inputs {
  _call: RecordProductCall;

  constructor(call: RecordProductCall) {
    this._call = call;
  }

  get _productCategory(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _issuerName(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _issuerAddress(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _issuerCountry(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _issuerSignatoryEmail(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _arrangerName(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _arrangerAddress(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _arrangerCountry(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get _arrangerSignatoryEmail(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get _registrationDocuments(): string {
    return this._call.inputValues[9].value.toString();
  }
}

export class RecordProductCall__Outputs {
  _call: RecordProductCall;

  constructor(call: RecordProductCall) {
    this._call = call;
  }
}

export class RegisterCertificateCall extends ethereum.Call {
  get inputs(): RegisterCertificateCall__Inputs {
    return new RegisterCertificateCall__Inputs(this);
  }

  get outputs(): RegisterCertificateCall__Outputs {
    return new RegisterCertificateCall__Outputs(this);
  }
}

export class RegisterCertificateCall__Inputs {
  _call: RegisterCertificateCall;

  constructor(call: RegisterCertificateCall) {
    this._call = call;
  }

  get _ref(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _issuerCertificate(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _arrangerCertificate(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RegisterCertificateCall__Outputs {
  _call: RegisterCertificateCall;

  constructor(call: RegisterCertificateCall) {
    this._call = call;
  }
}

export class ConfirmProductCall extends ethereum.Call {
  get inputs(): ConfirmProductCall__Inputs {
    return new ConfirmProductCall__Inputs(this);
  }

  get outputs(): ConfirmProductCall__Outputs {
    return new ConfirmProductCall__Outputs(this);
  }
}

export class ConfirmProductCall__Inputs {
  _call: ConfirmProductCall;

  constructor(call: ConfirmProductCall) {
    this._call = call;
  }

  get _ref(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ConfirmProductCall__Outputs {
  _call: ConfirmProductCall;

  constructor(call: ConfirmProductCall) {
    this._call = call;
  }
}

export class RegisterPlatformCall extends ethereum.Call {
  get inputs(): RegisterPlatformCall__Inputs {
    return new RegisterPlatformCall__Inputs(this);
  }

  get outputs(): RegisterPlatformCall__Outputs {
    return new RegisterPlatformCall__Outputs(this);
  }
}

export class RegisterPlatformCall__Inputs {
  _call: RegisterPlatformCall;

  constructor(call: RegisterPlatformCall) {
    this._call = call;
  }

  get _liquidityPlatform(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterPlatformCall__Outputs {
  _call: RegisterPlatformCall;

  constructor(call: RegisterPlatformCall) {
    this._call = call;
  }
}
